{"version":3,"sources":["components/weather/Weathercard.js","components/weather/temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","tempInfo","React","useState","weatherstate","setweatherstate","temp","humidity","pressure","weathermood","name","speed","country","sunset","useEffect","date","Date","timestr","getHours","getMinutes","className","toLocaleString","Temp","searchvalue","setsearchvalue","tempinfo","settempinfo","getweatherinfo","a","url","process","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","event","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75b03faf.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\n\r\nconst Weathercard = ({tempInfo}) => {\r\n    const [weatherstate, setweatherstate] = React.useState(\"\");\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n    } = tempInfo;\r\n\r\n    useEffect(() => {\r\n      if (weathermood) {\r\n          switch (weathermood) {\r\n              case \"Clouds\":\r\n                setweatherstate(\"wi-day-cloudy\");\r\n                  break;\r\n          \r\n              case \"Haze\":\r\n                setweatherstate(\"wi-day-haze\");\r\n                  break;\r\n          \r\n              case \"Clear\":\r\n                setweatherstate(\"wi-day-sunny\");\r\n                  break;\r\n          \r\n              case \"Mist\":\r\n                setweatherstate(\"wi-dust\");\r\n                  break;\r\n          \r\n              case \"Rain\":\r\n                setweatherstate(\"wi-day-rain\");\r\n                  break;\r\n          \r\n              default:\r\n                setweatherstate(\"wi-day-sunny\");\r\n                  break;\r\n          }\r\n      }\r\n    }, [weathermood])\r\n\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timestr = `${date.getHours()}:${date.getMinutes()}`;\r\n    return (\r\n        <>\r\n             <article className=\"widget\">\r\n                <div className=\"weathericon\">\r\n                    <i className={`wi ${weatherstate}`}></i>\r\n                </div>\r\n                <div className=\"weatherinfo\">\r\n                    <div className=\"temperature\">\r\n                        <span>{temp}&deg;c</span>\r\n                    </div>\r\n                    <div className=\"description\">\r\n                        <div className=\"weathercondition\">{weathermood}</div>\r\n                        <div className=\"place\">{name}, {country}</div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n                <div className=\"date\">{new Date().toLocaleString()}</div>\r\n                <div className=\"extra-temp\">\r\n                    <div className=\"temp-info-minmax\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-sunset\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                            {timestr} <br />\r\n                                sunset\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-humidity\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                            {humidity} <br />\r\n                                humidity\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"weather-extra-info\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-rain\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                            {pressure} <br />\r\n                                pressure\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-strong-wind\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                            {speed} <br />\r\n                                speed\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weathercard;\r\n","import React, { useState, useEffect } from 'react'\r\nimport \"./style.css\";\r\nimport Weathercard from './Weathercard';\r\nconst Temp = () => {\r\n    const [searchvalue, setsearchvalue] = useState(\"delhi\");\r\n    const [tempinfo, settempinfo] = useState({});\r\n    const getweatherinfo = async () =>{\r\n        try {\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchvalue}&units=metric&appid=${process.env.REACT_APP_API_KEY}`;\r\n\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            const{ temp, humidity, pressure } = data.main;\r\n            const { main: weathermood } = data.weather[0];\r\n            const{ name } = data;\r\n            const{ speed } = data.wind;\r\n            const{ country, sunset } = data.sys;\r\n\r\n            const mynewweatherinfo = {\r\n                temp,\r\n                humidity,\r\n                pressure,\r\n                weathermood,\r\n                name,\r\n                speed,\r\n                country,\r\n                sunset,\r\n            };\r\n            settempinfo(mynewweatherinfo);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getweatherinfo();\r\n    }, [])\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n                <div className=\"search\">\r\n                    <input type=\"search\"\r\n                        placeholder=\"search...\"\r\n                        autoFocus\r\n                        id=\"search\"\r\n                        className=\"searchTerm\"\r\n                        value={searchvalue}\r\n                        onChange={(event)=>setsearchvalue(event.target.value)}\r\n                    />\r\n                    <button className=\"searchButton\" type=\"button\" onClick={getweatherinfo}>\r\n                        Search\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <Weathercard tempInfo={tempinfo}/>\r\n           \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Temp;\r\n","import React from 'react'\nimport Temp from './components/weather/temp';\n\nconst App = () => {\n  return (\n    <div>\n      <Temp/>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}